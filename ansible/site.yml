---
- name: Setup frontend and nginx
  hosts: frontend
  become: true
  vars:
    node_version: "v14.17.4"
  tasks:

    - name: Ensure NVM is installed
      shell: |
        export NVM_DIR="/usr/share/nvm"
        if [ ! -d "$NVM_DIR" ]; then
          mkdir -p $NVM_DIR
          curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.4/install.sh | bash
        fi
      args:
        executable: /bin/bash

    - name: Load NVM and install Node {{ node_version }}
      shell: |
        source /usr/share/nvm/init-nvm.sh
        nvm install {{ node_version }}
        nvm use {{ node_version }}
      args:
        executable: /bin/bash

    - name: Update .env.production - disable speak-ukrainian
      ansible.builtin.lineinfile:
        path: "{{ ansible_env.PWD }}/.env.production"
        regexp: '^.*speak-ukrainian.*$'
        line: '##speak-ukrainian'

    - name: Update .env.production - enable localhost
      ansible.builtin.lineinfile:
        path: "{{ ansible_env.PWD }}/.env.production"
        regexp: '^##(.*localhost.*)$'
        line: '\1'
        backrefs: yes

    - name: Install npm dependencies
      npm:
        path: "{{ ansible_env.PWD }}"
        production: no

    - name: Install ajv
      npm:
        name: ajv
        global: no
        path: "{{ ansible_env.PWD }}"

    - name: Build frontend
      shell: |
        source /usr/share/nvm/init-nvm.sh
        nvm use {{ node_version }}
        npm run build
      args:
        chdir: "{{ ansible_env.PWD }}"
        executable: /bin/bash

    - name: Backup existing nginx config
      shell: mv /etc/nginx/nginx.conf /etc/nginx/nginx.conf.back
      args:
        creates: /etc/nginx/nginx.conf.back

    - name: Deploy nginx config
      copy:
        dest: /etc/nginx/nginx.conf
        content: |
          events {
            worker_connections 1024;
          }

          http {
            include       mime.types;
            server {
              listen 80;
              root /usr/share/nginx/html;
              try_files $uri /index.html;

              location /api {
                proxy_pass http://localhost:8080;
              }

              location /oauth2 {
                proxy_pass http://localhost:8080;
              }

              location /upload {
                proxy_pass http://localhost:8080;
              }

              location /swagger-ui {
                proxy_pass http://localhost:8080;
              }
            }
          }

    - name: Backup old html files if exist
      shell: mv /usr/share/nginx/html /usr/share/nginx/html.back
      args:
        removes: /usr/share/nginx/html

    - name: Deploy frontend build to nginx
      copy:
        src: "{{ ansible_env.PWD }}/build/"
        dest: /usr/share/nginx/html/
        owner: http
        group: http
        mode: '0755'
        remote_src: yes

    - name: Start nginx
      systemd:
        name: nginx
        state: started
        enabled: true
