---
- name: Deploy Backend Application to GCP
  hosts: gcp_group_instance_back_group
  become: yes
  gather_facts: true
  
  vars:
    service_account_file: gcp_client_hsecret.json
    ansible_ssh_common_args: '-i ~/.ssh/google_compute_engine -J devops@bastion.us-central1-c.teachua-6147'
    backend_port: 8080
    db_host: "34.27.120.127"
    db_name: "teachua"
    db_user: "teachua_user"
    db_password: "securepassword123"
    
  tasks:
    - name: Update apt cache
      apt:
        update_cache: yes

    - name: Install required packages
      apt:
        name:
          - openjdk-11-jdk
          - maven
          - git
          - nginx
        state: present

    - name: Create application directory
      file:
        path: /opt/teachua
        state: directory
        owner: www-data
        group: www-data
        mode: '0755'

    - name: Sync backend code to remote server
      synchronize:
        src: ../backend/
        dest: /opt/teachua/backend/
        recursive: yes
        delete: yes
        compress: yes
        rsync_path: "sudo rsync"
        owner: no
        group: no

    - name: Set ownership of backend directory
      file:
        path: /opt/teachua/backend
        owner: www-data
        group: www-data
        recurse: yes

    - name: Create application.properties
      copy:
        dest: /opt/teachua/backend/src/main/resources/application.properties
        content: |
          # Database Configuration
          spring.datasource.driver-class-name=org.postgresql.Driver
          spring.datasource.url=jdbc:postgresql://{{ db_host }}:5432/{{ db_name }}
          spring.datasource.username={{ db_user }}
          spring.datasource.password={{ db_password }}
          
          # JPA Configuration
          spring.jpa.hibernate.ddl-auto=update
          spring.jpa.show-sql=false
          spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
          
          # Server Configuration
          server.port={{ backend_port }}
          
          # Application Configuration
          server.servlet.context-path=/api
          
          # File upload
          spring.servlet.multipart.max-file-size=10MB
          spring.servlet.multipart.max-request-size=10MB

    - name: Build backend application
      shell: |
        cd /opt/teachua/backend
        mvn clean package -DskipTests
      environment:
        JAVA_HOME: /usr/lib/jvm/java-11-openjdk-amd64
      become_user: www-data

    - name: Create systemd service for backend
      copy:
        dest: /etc/systemd/system/teachua-backend.service
        content: |
          [Unit]
          Description=TeachUA Backend Service
          After=network.target

          [Service]
          Type=simple
          User=www-data
          WorkingDirectory=/opt/teachua/backend
          ExecStart=/usr/bin/java -jar /opt/teachua/backend/target/dev.war
          Restart=on-failure
          RestartSec=10
          StandardOutput=journal
          StandardError=journal
          SyslogIdentifier=teachua-backend
          Environment="JAVA_HOME=/usr/lib/jvm/java-11-openjdk-amd64"

          [Install]
          WantedBy=multi-user.target

    - name: Start and enable backend service
      systemd:
        name: teachua-backend
        state: started
        enabled: yes
        daemon_reload: yes

    - name: Configure nginx as reverse proxy
      copy:
        dest: /etc/nginx/sites-available/default
        content: |
          server {
              listen 80;
              server_name _;

              location / {
                  proxy_pass http://localhost:{{ backend_port }};
                  proxy_set_header Host $host;
                  proxy_set_header X-Real-IP $remote_addr;
                  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                  proxy_set_header X-Forwarded-Proto $scheme;
              }
          }

    - name: Restart nginx
      systemd:
        name: nginx
        state: restarted

    - name: Wait for backend to be ready
      uri:
        url: "http://localhost:{{ backend_port }}/api/health"
        status_code: [200, 404]
      register: result
      until: result.status == 200 or result.status == 404
      retries: 30
      delay: 10 