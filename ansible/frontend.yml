- name: Deploy frontend app
  hosts: frontend
  become: yes

  vars_files:
    - var.yml

  tasks:
    - name: Ensure required packages are installed
      apt:
        name:
          - git
          - nginx
          - curl
          - software-properties-common
          - certbot
          - python3-certbot-nginx
          - rsync # for copying build files 
        state: present
        update_cache: yes

    # - name: Clone frontend repository
    #   git:
    #     repo: "{{ frontend_repo }}"
    #     dest: "{{ frontend_dest }}"
    #     version: "{{ frontend_version }}"
    #     force: yes

    # - name: Load NVM and install Node.js v14.17.4
    #   shell: |
    #     export NVM_DIR="$HOME/.nvm"
    #     [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
    #     nvm install v14.17.4
    #     nvm use v14.17.4
    #   args:
    #     executable: /bin/bash

    # - name: Update .env.production with frontend DNS
    #   lineinfile:
    #     path: "{{ frontend_dest }}/.env.production"
    #     regexp: '^REACT_APP_ROOT_SERVER='
    #     line: "REACT_APP_ROOT_SERVER=http://{{ hostvars['frontend']['dns_name'] }}"

    # - name: Install npm dependencies
    #   shell: |
    #     export NVM_DIR="$HOME/.nvm"
    #     [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
    #     nvm use v14.17.4
    #     npm install
    #     npm install ajv
    #   args:
    #     chdir: "{{ frontend_dest }}"
    #     executable: /bin/bash
    
    - name: Rsync prebuilt frontend build to Azure VM
      synchronize:
        src: "/Users/yurii.tokar/Downloads/build/"
        dest: /usr/share/nginx/html/
        recursive: yes
        delete: yes
        compress: yes
        rsync_path: "sudo rsync"

  #  - name: Build frontend
  #    shell: |
  #      export NVM_DIR="$HOME/.nvm"
  #      [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
  #      nvm use v14.17.4
  #      npm run build
  #    args:
  #      chdir: "{{ frontend_dest }}"
  #      executable: /bin/bash

    - name: Backup default nginx config
      shell: mv /etc/nginx/nginx.conf /etc/nginx/nginx.conf.back || true

    - name: Create nginx.conf
      copy:
        dest: /etc/nginx/nginx.conf
        content: |
          user www-data;
          worker_processes auto;
          pid /run/nginx.pid;
          include /etc/nginx/modules-enabled/*.conf;

          events {
            worker_connections 768;
          }

          http {
            include       /etc/nginx/mime.types;
            default_type  application/octet-stream;

            sendfile on;
            keepalive_timeout 65;

            include /etc/nginx/conf.d/*.conf;
            include /etc/nginx/sites-enabled/*;
          }

    - name: Write nginx config
      copy:
        dest: /etc/nginx/sites-available/default
        content: |
         server {
            listen 80;
            server_name {{ hostvars['frontend']['dns_name'] }};

            root /usr/share/nginx/html;
            index index.html index.htm;

            location / {
              try_files $uri /index.html;
            }

            location /api {
              proxy_pass http://{{ hostvars['backend']['dns_name'] }};
            }

            location /oauth2 {
              proxy_pass http://{{ hostvars['backend']['dns_name'] }};
            }

            location /upload {
              proxy_pass http://{{ hostvars['backend']['dns_name'] }};
            }

            location /swagger-ui {
              proxy_pass http://{{ hostvars['backend']['dns_name'] }};
            }
          }

    # - name: Backup default nginx html
    #   shell: mv /usr/share/nginx/html /usr/share/nginx/html.back || true

    # - name: Copy build to nginx
    #   copy:
    #     src: "{{ frontend_dest }}/build/"
    #     dest: /usr/share/nginx/html/
    #     owner: www-data
    #     group: www-data
    #     mode: 0755
    
    - name: Show nginx logs output
      debug:
        var: nginx_logs.stdout_lines

    - name: Restart nginx
      systemd:
        name: nginx
        state: restarted
        enabled: yes

    - name: Obtain SSL certificate with certbot
      shell: certbot --nginx -d {{ dns_name }} --non-interactive --agree-tos -m yura.tokarl@gmail.com
      args:
        creates: /etc/letsencrypt/live/{{ dns_name }}